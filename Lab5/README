
동영상은 여기서 보실수 있습니다.
https://youtu.be/-dTTaZNA5dw

CS 3630 Lab5.pdf를 보시면 더 자세한 설명을 보실수 있습니다.

RRT 알고리즘을 이용해 목적지에 도달합니다. 이때 장애물이 생겼을때 회피 기동을 합니다.

Step 1: Complete the node_generator method in rrt.py/rrt_vector.py. This method should return a randomly generated node, uniformly distributed within the map boundaries. Make sure to check that the node is in free-space. Additionally, implement your code such that with a 5% chance the goal location is returned instead of a random sample.
Step 2: Complete the step_from_to method in rrt.py/rrt_vector.py. This method takes as input two nodes and a limit parameter. If the distance between the nodes is less than the limit, return the second node. Else, return a new node along the same line but limit distance away from the first node.
Step 3: Complete the get_global_node method in rrt.py/rrt_vector.py, which is a helper function used by detect_cube_and_update_cmap function. This method takes as input the angle (in radians) and origin of the local coordinate frame in terms of the global frame, as well as the a node (x,y) coordinate in this local frame, and returns the node in the global frame. Remember from previous lectures that a point transformed from one frame to another follows the formula below, where theta and tx and ty would correspond to the angle and origin of the local
CS 3630 Spring 2019 Revised: 26-Oct-20 1
coordinate frame in terms of global coordinate frame, and px and py are the node (x,y) coordinate in this local frame:
Step 4: Complete the RRT method in rrt.py/rrt_vector.py. Complete the main loop of the algorithm by generating random nodes and assembling them into a tree in accordance with the algorithm. Code for goal detection, tracking parents, and generating the path between the start and end nodes is already provided within cmap.py.
Step 5: Once the above steps are complete, validate that your RRT algorithm works. We have provided several maps for testing purposes, located in the maps folder. You can run the algorithm on one map with a graphical visualizer by executing python rrt.py/rrt_vector.py (you can change the map in the main method at the bottom of the file), or you can run the algorithm on multiple maps at once without the visualizer by executing python autograder.py gradecase2.json.
Step 6: Now RRT should be working, but will return very convoluted paths. Improve performance by implementing path smoothing in get_smooth_path method in cmap.py.
Note that you may edit provided functions such as detect_cube_and_update_cmap if you would like, but shouldn’t need to.

본인이 edit 한 코드
rrt.py
